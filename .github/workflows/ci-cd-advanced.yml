name: CI/CD Advanced (O)

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump (patch|minor|major|none)"
        required: false
        default: "patch"
      simulate_fail_prod:
        description: "Simulate a failure in production to demo rollback"
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: advanced-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18, 20]
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # ✅ Solo instala si existe package.json
      - name: Install deps (skip if no package.json)
        run: |
          if [ -f package.json ]; then
            npm ci || npm install || true
          else
            echo "No package.json found, skipping npm install"
          fi

      # ✅ Lint opcional
      - name: Lint (best effort)
        run: |
          if [ -f package.json ]; then
            npm run lint || echo "no lint configured"
          else
            echo "Skipping lint (no package.json)"
          fi

      # ✅ Test opcional (smoke si no hay tests)
      - name: Tests (smoke if missing)
        run: |
          if [ -f package.json ]; then
            npm test || node -e "console.log('smoke test ok')"
          else
            node -e "console.log('smoke test ok (no package.json)')"
          fi

      # ✅ Auto-bump tolerante (solo en master y no falla si el push está bloqueado)
      - name: Auto-bump (optional & tolerant)
        if: ${{ github.event.inputs.bump != 'none' && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --unshallow || true
          if [ -f package.json ]; then
            npm version ${{ github.event.inputs.bump }} -m "ci: bump %s [skip ci]" || true
            git push --follow-tags || echo "push skipped (branch protection or fork)"
          else
            echo "No package.json, skipping npm version bump"
          fi

      # ✅ Resuelve versión (usa package.json si existe; si no, usa timestamp)
      - name: Resolve version
        id: ver
        run: |
          if [ -f package.json ]; then
            echo "version=$(node -p \"require('./package.json').version || '0.0.0'\")" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +%Y.%m.%d-%H%M)" >> $GITHUB_OUTPUT
          fi
          echo "Using version: $(grep version $GITHUB_OUTPUT || true)"

      # ✅ Build genérico (no falla si no hay script build)
      - name: Build
        run: |
          if [ -f package.json ]; then
            npm run build || echo "no build step"
          else
            echo "No package.json, nothing to build (will zip repo)"
          fi
          zip -r build.zip . -x ".git/*"

      - name: Upload artifact (versioned)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.ver.outputs.version }}
          path: build.zip

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.version }}

      - name: Release Staging
        uses: softprops/action-gh-release@v2
        with:
          tag_name: staging-v${{ needs.build.outputs.version }}
          name: staging-v${{ needs.build.outputs.version }}
          body: ${{ vars.RELEASE_NOTE }}
          files: build.zip
          prerelease: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify (Slack or Job Summary)
        if: always()
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"Staging deployed: staging-v${{ needs.build.outputs.version }}\"}" \
              "$WEBHOOK" || true
          fi
          echo "Staging deployed: staging-v${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.version }}

      - name: Optional failure (for rollback demo)
        if: ${{ github.event.inputs.simulate_fail_prod == true }}
        run: |
          echo "Simulating prod failure to trigger rollback"
          exit 1

      - name: Release Production
        uses: softprops/action-gh-release@v2
        with:
          tag_name: prod-v${{ needs.build.outputs.version }}
          name: prod-v${{ needs.build.outputs.version }}
          body: ${{ vars.RELEASE_NOTE }}
          files: build.zip
          prerelease: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify (Slack or Job Summary)
        if: always()
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"Production deployed: prod-v${{ needs.build.outputs.version }}\"}" \
              "$WEBHOOK" || true
          fi
          echo "Production deployed: prod-v${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY

      - name: Rollback on failure (delete release + tag)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag  = `prod-v${{ needs.build.outputs.version }}`;
            try {
              const rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              await github.rest.repos.deleteRelease({ owner, repo, release_id: rel.data.id });
              core.info(`Deleted release for ${tag}`);
            } catch (e) {
              core.warning(`No release to delete for ${tag}: ${e.message}`);
            }
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: `tags/${tag}` });
              core.info(`Deleted tag ${tag}`);
            } catch (e) {
              core.warning(`No tag ref to delete for ${tag}: ${e.message}`);
            }
